{
	"name": "pipeline2",
	"properties": {
		"activities": [
			{
				"name": "Until1",
				"description": "itertate 5 times",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Execute Pipeline1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('counter'),5)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Set counter",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set temp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "counter",
								"value": {
									"value": "@variables('temp')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set temp",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "temp",
								"value": {
									"value": "@add(variables('counter'),1)",
									"type": "Expression"
								}
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "Execute Pipeline1",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Fail1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "pipeline3",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"Child_param_A": {
							"value": "@pipeline().parameters.Tables",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Fail1",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Filter1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat( 'Today Date is ',formatDateTime(utcNow()),\n'DayofMonth :',string(dayOfMonth(utcNow())),\n'Dayofweek :',string(dayOfWeek(utcNow())),\n'DayofYear :',string(dayOfYear(utcNow())),\n'startofDay :', string(startOfDay(utcNow())),\n'startofHour :', string(startOfHour(utcNow())),\n'startofMonth :', string(startOfMonth(utcNow())))",
						"type": "Expression"
					},
					"errorCode": "1"
				}
			},
			{
				"name": "Get Metadata1",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ADLS_CSV_Generic_DS",
						"type": "DatasetReference",
						"parameters": {
							"Directory": "Customer"
						}
					},
					"fieldList": [],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Filter1",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Get Metadata1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Metadata1').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type,'Folder')",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"Tables": {
				"type": "array",
				"defaultValue": [
					"Customer",
					"Address"
				]
			}
		},
		"variables": {
			"counter": {
				"type": "Integer",
				"defaultValue": 0
			},
			"temp": {
				"type": "Integer",
				"defaultValue": 0
			}
		},
		"annotations": []
	}
}